open Course_language.Parser

let all_tokens_expected =
  [
    INT_TYP;
    ID "int_func";
    L_PAR;
    INT_TYP;
    ID "n";
    COMMA;
    VAR;
    INT_TYP;
    L_SQ_BRK;
    R_SQ_BRK;
    ID "tab";
    R_PAR;
    DEF;
    L_CUR_BRK;
    INT_TYP;
    ID "a";
    SEMICOLON;
    ID "a";
    ASSIGN;
    INT 0;
    ADD;
    ID "n";
    SUB;
    INT 1;
    MUL;
    L_PAR;
    ID "n";
    DIV;
    INT 2;
    MOD;
    INT 3;
    R_PAR;
    SEMICOLON;
    IF;
    L_PAR;
    ID "a";
    EQ;
    ID "n";
    R_PAR;
    THEN;
    ID "tab";
    L_SQ_BRK;
    INT 0;
    R_SQ_BRK;
    ASSIGN;
    INT 3;
    SEMICOLON;
    ELSE;
    ID "tab";
    L_SQ_BRK;
    ID "tab";
    DOT;
    SIZE;
    SUB;
    INT 1;
    R_SQ_BRK;
    ASSIGN;
    INT 1;
    SEMICOLON;
    RETURN;
    ID "tab";
    L_SQ_BRK;
    ID "n";
    DIV;
    INT 2;
    R_SQ_BRK;
    SEMICOLON;
    R_CUR_BRK;
    FLOAT_TYP;
    ID "float_func";
    L_PAR;
    INT_TYP;
    ID "n";
    COMMA;
    VAR;
    FLOAT_TYP;
    L_SQ_BRK;
    R_SQ_BRK;
    ID "tab";
    R_PAR;
    DEF;
    L_CUR_BRK;
    FLOAT_TYP;
    ID "b";
    SEMICOLON;
    ID "b";
    ASSIGN;
    FLOAT 0.;
    ADD;
    ID "tab";
    L_SQ_BRK;
    INT 0;
    R_SQ_BRK;
    SUB;
    FLOAT 0.4;
    MUL;
    L_PAR;
    ID "tab";
    L_SQ_BRK;
    INT 1;
    R_SQ_BRK;
    DIV;
    FLOAT 4.2;
    MOD;
    FLOAT 50.54;
    R_PAR;
    SEMICOLON;
    WHILE;
    L_PAR;
    ID "b";
    LEQ;
    FLOAT 40.25;
    R_PAR;
    L_CUR_BRK;
    ID "b";
    ASSIGN;
    ID "b";
    ADD;
    FLOAT 1.2;
    SEMICOLON;
    R_CUR_BRK;
    RETURN;
    ID "b";
    SUB;
    ID "tab";
    L_SQ_BRK;
    INT 3;
    R_SQ_BRK;
    SEMICOLON;
    R_CUR_BRK;
    BOOL_TYP;
    ID "bool_func";
    L_PAR;
    BOOL_TYP;
    ID "a";
    COMMA;
    BOOL_TYP;
    ID "b";
    COMMA;
    INT_TYP;
    ID "n";
    COMMA;
    INT_TYP;
    ID "m";
    R_PAR;
    DEF;
    L_CUR_BRK;
    BOOL_TYP;
    ID "c";
    SEMICOLON;
    ID "c";
    ASSIGN;
    ID "a";
    AND;
    ID "b";
    SEMICOLON;
    ID "c";
    ASSIGN;
    ID "a";
    OR;
    ID "b";
    SEMICOLON;
    ID "c";
    ASSIGN;
    NOT;
    ID "a";
    SEMICOLON;
    ID "c";
    ASSIGN;
    ID "n";
    LT;
    ID "m";
    SEMICOLON;
    ID "c";
    ASSIGN;
    L_PAR;
    ID "n";
    GEQ;
    ID "m";
    R_PAR;
    OR;
    L_PAR;
    ID "n";
    NEQ;
    ID "m";
    R_PAR;
    SEMICOLON;
    ID "c";
    ASSIGN;
    ID "n";
    LEQ;
    ID "m";
    SEMICOLON;
    ID "c";
    ASSIGN;
    L_PAR;
    ID "n";
    EQ;
    ID "m";
    R_PAR;
    OR;
    L_PAR;
    ID "n";
    GT;
    ID "m";
    R_PAR;
    SEMICOLON;
    RETURN;
    ID "c";
    SEMICOLON;
    R_CUR_BRK;
    NULL_TYP;
    ID "main";
    L_PAR;
    R_PAR;
    DEF;
    L_CUR_BRK;
    INT_TYP;
    ID "a";
    SEMICOLON;
    ID "a";
    ASSIGN;
    INT 0;
    SEMICOLON;
    INT_TYP;
    ID "tab";
    L_SQ_BRK;
    INT 11;
    R_SQ_BRK;
    SEMICOLON;
    PRINT;
    STRING "coucou\\n";
    SEMICOLON;
    PRINT;
    ID "int_func";
    L_PAR;
    ID "a";
    COMMA;
    ID "tab";
    R_PAR;
    SEMICOLON;
    FLOAT_TYP;
    ID "b";
    SEMICOLON;
    FLOAT_TYP;
    ID "tab2";
    L_SQ_BRK;
    INT 14;
    R_SQ_BRK;
    SEMICOLON;
    ID "b";
    ASSIGN;
    FLOAT 4.2;
    SEMICOLON;
    ID "float_func";
    L_PAR;
    ID "a";
    COMMA;
    ID "tab2";
    R_PAR;
    SEMICOLON;
    R_CUR_BRK;
    EOF;
  ]

let commentaries_expected =
  [
    L_CUR_BRK;
    INT_TYP;
    ID "x";
    SEMICOLON;
    ID "x";
    ASSIGN;
    INT 1;
    SEMICOLON;
    ID "y";
    ASSIGN;
    FLOAT 3.2;
    SEMICOLON;
    R_CUR_BRK;
    EOF;
  ]

let float_and_bool_expected =
  [
    FLOAT_TYP;
    ID "toto";
    L_PAR;
    FLOAT_TYP;
    ID "bim";
    COMMA;
    VAR;
    BOOL_TYP;
    L_SQ_BRK;
    R_SQ_BRK;
    ID "tab";
    R_PAR;
    DEF;
    L_CUR_BRK;
    ID "pouf";
    ASSIGN;
    FLOAT 1.2;
    ADD;
    ID "bim";
    SUB;
    FLOAT 7.5;
    MUL;
    L_PAR;
    FLOAT 4.3;
    DIV;
    L_PAR;
    FLOAT 52.3;
    MOD;
    FLOAT 12.2;
    R_PAR;
    R_PAR;
    SEMICOLON;
    ID "tab";
    L_SQ_BRK;
    INT 1;
    R_SQ_BRK;
    ASSIGN;
    ID "pouf";
    LT;
    FLOAT 4.5;
    SEMICOLON;
    ID "tab";
    L_SQ_BRK;
    INT 2;
    R_SQ_BRK;
    ASSIGN;
    BOOL true;
    SEMICOLON;
    ID "tab";
    L_SQ_BRK;
    INT 3;
    R_SQ_BRK;
    ASSIGN;
    BOOL false;
    SEMICOLON;
    WHILE;
    L_PAR;
    ID "tab";
    L_SQ_BRK;
    INT 2;
    R_SQ_BRK;
    R_PAR;
    ID "pouf";
    ASSIGN;
    ID "pouf";
    ADD;
    FLOAT 2.3;
    SEMICOLON;
    R_CUR_BRK;
    EOF;
  ]

let plagiat1_expected =
  [
    INT_TYP;
    ID "ma_fonction";
    L_PAR;
    INT_TYP;
    L_SQ_BRK;
    R_SQ_BRK;
    ID "tab";
    COMMA;
    VAR;
    FLOAT_TYP;
    ID "control";
    R_PAR;
    DEF;
    L_CUR_BRK;
    ID "variable";
    ASSIGN;
    ID "control";
    SUB;
    FLOAT 20.;
    SEMICOLON;
    INT_TYP;
    ID "i";
    SEMICOLON;
    ID "i";
    ASSIGN;
    INT 0;
    SEMICOLON;
    WHILE;
    L_PAR;
    ID "i";
    LT;
    ID "tab";
    DOT;
    SIZE;
    R_PAR;
    L_CUR_BRK;
    IF;
    L_PAR;
    ID "control";
    MUL;
    ID "variable";
    LEQ;
    FLOAT 3.;
    R_PAR;
    THEN;
    ID "tab";
    L_SQ_BRK;
    ID "i";
    R_SQ_BRK;
    ASSIGN;
    ID "tab";
    L_SQ_BRK;
    ID "i";
    R_SQ_BRK;
    SUB;
    INT 1;
    SEMICOLON;
    ELSE;
    ID "tab";
    L_SQ_BRK;
    ID "i";
    R_SQ_BRK;
    ASSIGN;
    ID "tab";
    L_SQ_BRK;
    ID "i";
    R_SQ_BRK;
    ADD;
    INT 1;
    SEMICOLON;
    ID "i";
    ASSIGN;
    ID "i";
    ADD;
    INT 1;
    SEMICOLON;
    R_CUR_BRK;
    R_CUR_BRK;
    EOF;
  ]

let plagiat2_expected =
  [
    INT_TYP;
    ID "toto";
    L_PAR;
    INT_TYP;
    L_SQ_BRK;
    R_SQ_BRK;
    ID "mouaah";
    COMMA;
    VAR;
    FLOAT_TYP;
    ID "un_flottant";
    R_PAR;
    DEF;
    L_CUR_BRK;
    ID "variable";
    ASSIGN;
    ID "un_flottant";
    SUB;
    FLOAT 20.;
    SEMICOLON;
    INT_TYP;
    ID "mon_compteur";
    SEMICOLON;
    ID "mon_compteur";
    ASSIGN;
    INT 0;
    SEMICOLON;
    WHILE;
    L_PAR;
    ID "mon_compteur";
    LT;
    ID "mouaah";
    DOT;
    SIZE;
    R_PAR;
    L_CUR_BRK;
    IF;
    L_PAR;
    ID "un_flottant";
    MUL;
    ID "variable";
    LEQ;
    FLOAT 3.;
    R_PAR;
    THEN;
    ID "mouaah";
    L_SQ_BRK;
    ID "mon_compteur";
    R_SQ_BRK;
    ASSIGN;
    ID "mouaah";
    L_SQ_BRK;
    ID "mon_compteur";
    R_SQ_BRK;
    SUB;
    INT 1;
    SEMICOLON;
    ELSE;
    ID "mouaah";
    L_SQ_BRK;
    ID "mon_compteur";
    R_SQ_BRK;
    ASSIGN;
    ID "mouaah";
    L_SQ_BRK;
    ID "mon_compteur";
    R_SQ_BRK;
    ADD;
    INT 1;
    SEMICOLON;
    ID "mon_compteur";
    ASSIGN;
    ID "mon_compteur";
    ADD;
    INT 1;
    SEMICOLON;
    R_CUR_BRK;
    R_CUR_BRK;
    EOF;
  ]

let toto_expected =
  [
    INT_TYP;
    ID "toto";
    L_PAR;
    VAR;
    INT_TYP;
    ID "x";
    R_PAR;
    DEF;
    ID "x";
    ASSIGN;
    L_PAR;
    ID "x";
    ADD;
    INT 1;
    R_PAR;
    SEMICOLON;
    NULL_TYP;
    ID "main";
    L_PAR;
    R_PAR;
    DEF;
    L_CUR_BRK;
    ID "y";
    ASSIGN;
    INT 1;
    SUB;
    INT 9;
    ADD;
    INT 2;
    MUL;
    INT 2;
    DIV;
    INT 4;
    MOD;
    INT 42;
    SEMICOLON;
    PRINT;
    STRING "premier\\n";
    SEMICOLON;
    PRINT;
    L_PAR;
    ID "y";
    R_PAR;
    SEMICOLON;
    ID "toto";
    L_PAR;
    ID "y";
    R_PAR;
    SEMICOLON;
    PRINT;
    STRING "\\nsecond\\n";
    SEMICOLON;
    PRINT;
    L_PAR;
    ID "y";
    R_PAR;
    SEMICOLON;
    R_CUR_BRK;
    EOF;
  ]
